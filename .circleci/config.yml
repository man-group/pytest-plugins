orbs:
  win: circleci/windows@2.2.0

windows-tmpl: &windows-tmpl
  parameters:
    python-version:
      type: string
  executor:
    name: win/default
    shell: bash.exe
  steps:
    - checkout
    - run:
        name: Set up Python
        command: |
          set -e
          . install.sh
          install_windows_make
          install_windows_python << parameters.python_version >>
          init_venv python
    - run:
        name: Install dependencies
        command: |
          python --version
          make develop
    - run:
        name: Run tests
        command: |
          export DEBUG=1
          export SERVER_FIXTURES_JENKINS_WAR=
          export PACKAGES=$(./foreach.sh --quiet 'grep -q Windows setup.py && echo $PKG || true')
          make test-ci
    - store_test_results:
        path: junit
    - run:
        name: Check for failures
        command: make list-test-failures

test-tmpl: &test-tmpl
  command: |
    pwd
    . ../venv/bin/activate
    export DEBUG=1
    export SERVER_FIXTURES_HOSTNAME=127.0.0.1
    export SERVER_FIXTURES_JENKINS_WAR=
    set -x
    cat *.egg-info/top_level.txt  | xargs -Ipysrc coverage run -p --source=pysrc -m pytest --junitxml junit.xml -svvvv -ra || touch ../FAILED-$(basename $PWD)

job-tmpl: &job-tmpl
  machine:
    image: ubuntu-2004:edge

  working_directory: /home/circleci/src

  steps:
    - run: env
    - checkout
    - run:
        name: Install Python
        command: |
          set -x
          sudo bash -c "source ./install.sh && install_python_ppa && install_python $PYTHON"
          sudo rm -rf /opt/circleci/.pyenv

    - run:
        name: Create venv and install extras
        command: bash -c "source ./install.sh && init_venv $PYTHON"

    - run:
        name: Update Apt-Sources
        command: sudo bash -c "source ./install.sh && update_apt_sources"
    - run:
        name: Install System Dependencies
        command: sudo bash -c "source ./install.sh && install_system_deps"
    - run:
        name: Install Postgresql
        command: sudo bash -c "source ./install.sh && install_postgresql"
    - run:
        name: Install Redis
        command: sudo bash -c "source ./install.sh && install_redis"
    - run:
        name: Install Mongodb
        command: sudo bash -c "source ./install.sh && install_mongodb"
    - run:
        name: Install Graphviz
        command: sudo bash -c "source ./install.sh && install_graphviz"
    - run:
        name: Install Apache
        command: sudo bash -c "source ./install.sh && install_apache"
    - run:
        name: Install Minio
        command: sudo bash -c "source ./install.sh && install_minio"
    - run:
        name: Install Chrome Headless
        command: sudo bash -c "source ./install.sh && install_chrome_headless"

    - run:
        name: Build and install dists
        command: |
          . venv/bin/activate
          make develop
    - run:
        name: Run Tests - pytest-fixture-config
        working_directory: /home/circleci/src/pytest-fixture-config
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-shutil
        working_directory: /home/circleci/src/pytest-shutil
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-server-fixtures
        working_directory: /home/circleci/src/pytest-server-fixtures
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-pyramid-server
        working_directory: /home/circleci/src/pytest-pyramid-server
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-devpi-server
        working_directory: /home/circleci/src/pytest-devpi-server
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-listener
        working_directory: /home/circleci/src/pytest-listener
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-svn
        working_directory: /home/circleci/src/pytest-svn
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-git
        working_directory: /home/circleci/src/pytest-git
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-virtualenv
        working_directory: /home/circleci/src/pytest-virtualenv
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-webdriver
        working_directory: /home/circleci/src/pytest-webdriver
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-profiling
        working_directory: /home/circleci/src/pytest-profiling
        <<: *test-tmpl
    - run:
        name: Run Tests - pytest-verbose-parametrize
        working_directory: /home/circleci/src/pytest-verbose-parametrize
        <<: *test-tmpl
    - run:
        name: Archive Junit and Coverage
        command: |
          mkdir junit
          ./foreach.sh 'cp junit.xml ../junit/junit-$PKG.xml || true'
          ./foreach.sh 'cp .coverage.* .. || true'
          . venv/bin/activate
          coverage combine
          coverage report
          pip install urllib3[secure]

    - store_test_results:
        path: junit
    - run:
        name: Explode if tests have failed
        command: compgen -G FAILED-* && exit 1 || true
    - run:
        name: Build artifacts
        command: |
          . venv/bin/activate
          make wheels
          make sdists
          mkdir dist
          mv */dist/* dist
    - run:
        name: Move artifacts to workspace
        command: |
          mkdir -p /tmp/to-release/dist
          if [ "$PYTHON" = "python3.6" ]; then
            cp -r /home/circleci/src/dist /tmp/to-release/
            cp /home/circleci/src/VERSION /tmp/to-release/VERSION
            cp /home/circleci/src/CHANGES.md /tmp/to-release/CHANGES.md
          fi
    # Save artifacts. This is silly but wildcards aren't supported.
    - store_artifacts:
        path: /home/circleci/src/dist/
    - persist_to_workspace:
        root: /tmp/to-release/
        paths:
          - ./*
          - ./dist/*

version: 2.1
jobs:
  python-ubuntu:
    <<: *job-tmpl
    parameters:
      python_version:
        type: string
    environment:
      PYTHON: << parameters.python_version >>
  python-windows:
    <<: *windows-tmpl
    parameters:
      python_version:
        type: string
    environment:
      PYTHON: << parameters.python_version >>

  pypi-release:
    docker:
      - image: cimg/python:3.11.0
    steps:
      - attach_workspace:
          at: /tmp/to-release
      - run:
          name: Upload to TestPyPI
          command: | # install twine and publish to Test PyPI
            cd /tmp/to-release
            sudo add-apt-repository universe -y
            sudo apt-get update
            sudo apt install -y python3-pip
            sudo pip install pipenv
            pipenv install twine
            pipenv run twine upload --skip-existing --verbose dist/*


  publish-github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: /tmp/to-release
      - run:
          name: Output useful stuff
          command: |
            cd /tmp/to-release/
            VERSION_FILE="/tmp/to-release/VERSION"
            if [ ! -f "$VERSION_FILE" ]; then
                echo "Error: Version file not found at $VERSION_FILE"
                exit 1
            fi
            VERSION=$(cat "$VERSION_FILE" | tr -d '[:space:]')
            if [ -z "$VERSION" ]; then
                echo "Error: Version file is empty"
                exit 1
            fi
            # Find the lines of the changelog between releases, escape double quotes, delete empty lines
            awk '/### '"$VERSION"'/,/^$/{print}' CHANGES.md | sed '1d;$d' > latest_changes.md
      - run:
          name: "Publish release on GitHub"
          command: |
            VERSION=$(cat /tmp/to-release/VERSION)
            CHANGES=$(cat /tmp/to-release/latest_changes.md)
            ghr -t ${GITHUB_TOKEN} \
                -u ${CIRCLE_PROJECT_USERNAME} \
                -r ${CIRCLE_PROJECT_REPONAME} \
                -c ${CIRCLE_SHA1} \
                -n ${VERSION} \
                -b "${CHANGES}" \
                -soft \
                "v${VERSION}" /tmp/to-release/dist


workflows:
  version: 2
  pytest-plugins:
    jobs:
      - python-windows:
          matrix:
            parameters:
              python_version:
                - "python3.6"
                - "python3.7"
                - "python3.8"
                - "python3.9"
                - "python3.10"
                - "python3.11"
                - "python3.12"
      - python-ubuntu:
          matrix:
            parameters:
              python_version:
                - "python3.6"
                - "python3.7"
                - "python3.8"
                - "python3.9"
                - "python3.10"
                - "python3.11"
                - "python3.12"
                - "python3.13"
      - pypi-release:
          requires:
            - python-ubuntu
            - python-windows
          filters:
            branches:
              only:
                - master
      - publish-github-release:
          requires:
            - python-ubuntu
            - python-windows
          filters:
            branches:
              only:
                - master

